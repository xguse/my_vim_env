let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
argglobal
map <buffer> <silent> \nr ya[op$a:
map <buffer> <silent> \br :call pandoc_misc#Pandoc_Back_From_Ref()
map <buffer> <silent> \gr :call pandoc_misc#Pandoc_Goto_Ref()
map <buffer> <silent> \www :call pandoc_misc#Pandoc_Open_URI()
map <buffer> <silent> \odt+ :call pandoc_exec#PandocExecute("pandoc -t odt PANDOC#P_BIBS -o %:r.odt %%", "odt" , 1)
map <buffer> <silent> \odt :call pandoc_exec#PandocExecute("pandoc -t odt PANDOC#P_BIBS -o %:r.odt %%", "odt", 0)
map <buffer> <silent> \pdf+ :call pandoc_exec#PandocExecute("pandoc --latex-engine xelatex PANDOC#P_BIBS -o %:r.pdf %%", "pdf" , 1)
map <buffer> <silent> \pdf :call pandoc_exec#PandocExecute("pandoc --latex-engine xelatex PANDOC#P_BIBS -o %:r.pdf %%", "pdf", 0)
map <buffer> <silent> \html+ :call pandoc_exec#PandocExecute("pandoc -t html -Ss -o %:r.html %%", "html" , 1)
map <buffer> <silent> \html :call pandoc_exec#PandocExecute("pandoc -t html -Ss -o %:r.html %%", "html", 0)
map <buffer> <silent> \s :call pandoc_misc#Toggle_Tex_Syntax()
cnoremap <buffer> <expr>  fugitive#buffer().rev()
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal balloonexpr=
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=s:<!--,m:\ \ \ \ ,e:-->
setlocal commentstring=<!--%s-->
setlocal complete=.,w,b,u,t
setlocal concealcursor=
setlocal conceallevel=2
setlocal completefunc=youcompleteme#Complete
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
setlocal nocursorline
setlocal define=
setlocal dictionary=/home/gus.
setlocal nodiff
setlocal equalprg=pandoc\ -t\ markdown\ --reference-links
setlocal errorformat=
setlocal noexpandtab
if &filetype != 'pandoc'
setlocal filetype=pandoc
endif
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=pandoc#MarkdownLevel()
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=expr
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=1
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=2
setlocal imsearch=2
setlocal include=
setlocal includeexpr=
setlocal indentexpr=
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=48-57,a-z,A-Z,192-255
setlocal keywordprg=
setlocal linebreak
setlocal nolisp
setlocal lispwords=
setlocal nolist
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=hex
setlocal number
setlocal numberwidth=4
setlocal omnifunc=pandoc#Pandoc_Complete
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=8
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=0
setlocal spell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en_us
setlocal statusline=
setlocal suffixesadd=
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != 'pandoc'
setlocal syntax=pandoc
endif
setlocal tabstop=8
setlocal tags=./tags,./TAGS,tags,TAGS,~/Dropbox/repos/git/md_writing/.git/pandoc.tags,~/Dropbox/repos/git/md_writing/.git/tags
setlocal textwidth=0
setlocal thesaurus=
setlocal noundofile
setlocal undolevels=-123456
setlocal nowinfixheight
setlocal nowinfixwidth
setlocal wrap
setlocal wrapmargin=0
1
normal! zo
let s:l = 47 - ((46 * winheight(0) + 25) / 51)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
47
normal! 066|
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
" vim: set ft=vim :
